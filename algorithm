#include "stm32f0xx.h"
#include "semihosting.h"
#include "stm32f0xx_gpio.h"
#include "stm32f0xx_rcc.h"
#include "data_processing.h"


//PA0 echo PC3 trig
//PC10 PC11 motor control pins`


volatile uint8_t catcher_status = 0;     //status of echo interuption : 0 - rising edge, 1 - falling edge
volatile uint16_t duration = 0;
volatile uint8_t MODE = 0; // 0 - raw data, 1 - strikes

char sensor_Ultrasonic = 'U';
char sensor_Lazer = 'L';

void Delay_ms(uint32_t ms) {
  volatile uint32_t nCount;
  RCC_ClocksTypeDef RCC_Clocks;
  RCC_GetClocksFreq (&RCC_Clocks);
  nCount = (RCC_Clocks.HCLK_Frequency/10000)*ms;
  for (; nCount!=0; nCount--);
}

void initPorts() {
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN |RCC_AHBENR_GPIOBEN;
	GPIOC->MODER |= GPIO_MODER_MODER3_0;
}
//
void init_interrupts() {
  //use TIM6 for counting ECHO length
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
	TIM6->PSC = 24 - 1; //us prescaler
	TIM6->ARR = 50000;  //count till 50 mc - time required for echo impulse to fade down
	NVIC_SetPriority(TIM6_DAC_IRQn, 3); //interrupt required to count whole cycle length
	NVIC_EnableIRQ(TIM6_DAC_IRQn);

  //use TIM 7 for counting TRIG time
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
	TIM7->PSC = 24 - 1; //us prescaler
    TIM7->ARR = 10;//count till 10 uc - time required for trigging ECHO impulse
	NVIC_SetPriority(TIM7_IRQn, 2); //interrupt required for counting TRIG duration
	NVIC_EnableIRQ(TIM7_IRQn);

	//configure PA0 interrupts
	SYSCFG->EXTICR[0] &= (uint16_t)~SYSCFG_EXTICR1_EXTI0_PA;
	EXTI->IMR |= EXTI_IMR_MR0;
	EXTI->RTSR |= EXTI_RTSR_TR0;
	NVIC_SetPriority(EXTI0_1_IRQn, 1);
	NVIC_EnableIRQ (EXTI0_1_IRQn);
}

void USART1_IRQHandler() {
	if((USART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE) {//check whether thre is new data in the receive register
		uint8_t chartoreceive = (uint8_t)(USART1->RDR);//read data from receive register
		switch(chartoreceive) {
				case 'M':
				case 'm':
					MODE = 1 - MODE;
					break;
				default: break;
			}
		}
		else {
			NVIC_DisableIRQ(USART1_IRQn);
		}

}



void sendToResultAndroid(int numbStrikes, char sensor){
	char temp[100] = "";
	if(sensor == 'U'){
		sprintf(temp, "U:%u;", numbStrikes);
		USARTSendString(temp);
	} else if (sensor == 'L') {
		sprintf(temp, "L:%u;", numbStrikes);
		USARTSendString(temp);
	} else if (sensor == 'I') {
		sprintf(temp, "I:%u;", numbStrikes);
		USARTSendString(temp);
	}
}

struct Data{
	int BottomStates[100];
	int BottomStatesCount;
	int TopStates[100];
	int TopStatesCount;
	int max;
};


struct Data processData_stateMachine(int dataTest[], int size){
    int TDS = 0;
    int BDS = 1;
    int UP_M = 2;
    int DOWN_M = 3;

    struct Data stateMachine;
//    parsedData.BottomStates[0] = 3;
//    printf("Test: %d \n", threeReurnedArgument.BottomStates[0]);
//    int BottomStates[1000];
    stateMachine.BottomStatesCount = 0;

//    int TopStates[1000];
    stateMachine.TopStatesCount = 0;

    int cur_state = TDS;

    int prev_dist = dataTest[0];


    for(int i = 1; i < size; i++) {
        if (cur_state == TDS){
            if (prev_dist < dataTest[i]) {
                cur_state = DOWN_M;
            }
        }
        else if(cur_state == BDS) {
            if (prev_dist > dataTest[i]) {
                cur_state = UP_M;
            }
        }
        else if (cur_state == UP_M) {
            if (prev_dist == dataTest[i]) {
                cur_state = TDS;
                stateMachine.TopStates[stateMachine.TopStatesCount] = prev_dist;
                stateMachine.TopStatesCount +=1;
            }
            else if(prev_dist < dataTest[i]) {
                cur_state = DOWN_M;
                stateMachine.TopStates[stateMachine.TopStatesCount] = prev_dist;
                stateMachine.TopStatesCount +=1;
            }
        }
        else if(cur_state == DOWN_M){
            if (prev_dist == dataTest[i]){
                cur_state = BDS;

                stateMachine.BottomStates[stateMachine.BottomStatesCount] = prev_dist;
                stateMachine.BottomStatesCount +=1;


            } else if(prev_dist > dataTest[i]){

            	stateMachine.BottomStates[stateMachine.BottomStatesCount] = prev_dist;
            	stateMachine.BottomStatesCount +=1;

                cur_state = UP_M;

            }

        }

        prev_dist = dataTest[i];
    }

//    for(int i = 0; i<BottomStatesCount; i++){
//        printf("Bottom States: %d \n", BottomStates[i]);
//    }


//    for(int i = 0; i<TopStatesCount; i++){
//        printf("Top States: %d \n", TopStates[i]);
//    }

    stateMachine.max = -1000;
    for(int c = 0; c < stateMachine.BottomStatesCount; c+=1) {
        if(stateMachine.BottomStates[c] > stateMachine.max) {
        	stateMachine.max = stateMachine.BottomStates[c];
        }
    }
    return stateMachine;
}

void sendDeadStates(int listOfStates[], int numberOfElements){
	for(int i = 0; i < numberOfElements; i++){
//	    printf("Bottom States: %d \n", BottomStates[i]);
//		send via USB
	    }
}

int getNumberOfStrikes(int distance, int *TDS, int *numberOfElements, int *numberOfTDS,int *distancesArray, int lambda, char sensor){
	if((distance <= *TDS + lambda)&&(distance >= *TDS - lambda)){
    		*numberOfTDS += 1;
    	}
    	if(distance < *TDS){
    	      *TDS = distance;
    	 }

    	if(distance != *TDS){
    		distancesArray[*numberOfElements] = distance;
    		*numberOfElements += 1;
//    		printf("%d\n", *numberOfElements);
    	}
    	if((*numberOfTDS == 5)){
    		struct Data stateMachineResult;
    		stateMachineResult = processData_stateMachine(distancesArray, *numberOfElements);
//    		printf("TEST: %d\n", 10);
    		if(stateMachineResult.max != -1000){
    			if(sensor == 'U'){
    				printf("MAX U: %d\n", stateMachineResult.max);
    				sendToResultAndroid(stateMachineResult.max, sensor);
    				sendDeadStates(stateMachineResult.BottomStates, stateMachineResult.BottomStatesCount);
    			}else if(sensor == 'L'){
    				printf("MAX L: %d\n", stateMachineResult.max);
    				sendToResultAndroid(stateMachineResult.max, sensor);
    			}else if(sensor =='I'){
    				sendToResultAndroid(stateMachineResult.max, sensor);
    			}
    		}
    		*numberOfTDS = 0;
    		*numberOfElements = 0;
    	}
    }


int main(void) {

	initPorts();
	init_interrupts();
	USARTInit();
	uint8_t dir = 1;  //motor direction


  // Set timer to count first 10us
	TIM7->DIER |= TIM_DIER_UIE;          // allow TIM7 interrupts
	GPIOC->ODR |= GPIO_ODR_3;            // turn on TRIG
	TIM7->CR1 |= TIM_CR1_CEN;            // enable TIM7


	Delay_ms(500);



    int TDS_Ultrasonic = duration/29;
    int numberOfElements_Ultrasionic = 0;
    int numberOfTDS_Ultrasonic  = 0;
    int distancesArray_Ultrasonic[100];

    int TDS_Lazer = duration/29;
    int numberOfElements_Lazer = 0;
    int numberOfTDS_Lazer  = 0;
    int distancesArray_Lazer[100];

//    printf("TDS Ultrasonic: %d\n", TDS_Ultrasonic);
//    printf("TDS Lazer: %d\n", TDS_Lazer);





	while(1)
    {
		//Studying Structure
//		int testList[8] = {3,5,6,7,8,8,4,3};
//		struct Data X = processData_stateMachine(testList, 8);
//		printf(X.max);

		Delay_ms(300);
		int distance = duration/29;
		printf("U: %d\n", distance);

		if (MODE == 0) {
			Delay_ms(300);
			sendToResultAndroid(distance, sensor_Ultrasonic);
//			printf("L: %d\n", 100);
		}
		else {
			Delay_ms(300);
			getNumberOfStrikes(distance, &TDS_Ultrasonic, &numberOfElements_Ultrasionic, &numberOfTDS_Ultrasonic, distancesArray_Ultrasonic, 0, sensor_Ultrasonic);
			Delay_ms(300);
		}



//		Delay_ms(300);
//		int distance_Lazer = duration/29;
//		printf("L: %d\n", distance_Lazer);
//		Delay_ms(300);
//		getNumberOfStrikes(distance_Lazer, &TDS_Lazer, &numberOfElements_Lazer, &numberOfTDS_Lazer, distancesArray_Lazer, 0, 'L');
//		Delay_ms(300);

    }
	TIM7->DIER &= ~TIM_DIER_UIE;
	TIM6->DIER &= ~TIM_DIER_UIE;
}


void EXTI0_1_IRQHandler(void)	{

	if ((EXTI->PR &= EXTI_PR_PR0) !=0 ) {
		if (!catcher_status) {
			TIM6->CR1 |= TIM_CR1_CEN; //start ECHO length counting
			catcher_status = 1;
			//switch to catching falling edge interrupts
			EXTI->RTSR &= ~EXTI_RTSR_TR0;
			EXTI->FTSR |= EXTI_FTSR_TR0;
		} else {
			TIM6->CR1 &= ~TIM_CR1_CEN;         // stop TIM6
			duration = TIM6->CNT;              // get length of ECHO in us
			TIM6->CNT = 0;
			catcher_status = 0;
			//switch to catching rising edge interrupts
			EXTI->FTSR &= ~EXTI_FTSR_TR0;
			EXTI->RTSR |= EXTI_RTSR_TR0;
			// set timer to count 50 ms of whole cycle
			TIM6->DIER |= TIM_DIER_UIE;        // enable TIM 6 interrupts
			TIM6->CR1 |= TIM_CR1_CEN;		  // start TIM6
		}
	}
	EXTI->PR |= 0x01;
}


// called after TIM7 counted 10us for TRIG
void TIM7_IRQHandler(void) {
	TIM7->SR &= ~TIM_SR_UIF;
	GPIOC->ODR &= ~GPIO_ODR_3;            // stop TRIG
	TIM7->DIER &= ~TIM_DIER_UIE;		//forbid interrupts from TIM7
}


// called after TIM6 counted 50ms for th whole cycle
void TIM6_DAC_IRQHandler(void) {
	  TIM6->SR &= ~TIM_SR_UIF;             //clear updtate interrupt
	  GPIOC->ODR |= GPIO_ODR_3;            // start TRIG
	  // start TIM7 for counting 10 us for TRIG
	  TIM7->DIER |= TIM_DIER_UIE;
	  TIM7->CR1 |= TIM_CR1_CEN;            // start TIM7
}


